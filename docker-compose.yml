version: '3.8'

services:
  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    container_name: asset-manager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-asset_manager}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      # 資料持久化 - 重要!
      - postgres_data:/var/lib/postgresql/data
      # 初始化腳本 (可選)
      # - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-asset_manager}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - asset-manager-network

  # Redis 快取服務
  redis:
    image: redis:7-alpine
    container_name: asset-manager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      # Redis 資料持久化
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - asset-manager-network

  # Backend API 服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: asset-manager-backend:latest
    container_name: asset-manager-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # 資料庫設定
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-asset_manager}
      
      # Redis 設定
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}
      PRICE_CACHE_EXPIRATION: ${PRICE_CACHE_EXPIRATION:-5m}
      
      # 應用程式設定
      APP_PORT: 8080
      GIN_MODE: ${GIN_MODE:-release}
      
      # API Keys
      FINMIND_API_KEY: ${FINMIND_API_KEY}
      COINGECKO_API_KEY: ${COINGECKO_API_KEY}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      
      # 排程器設定
      SNAPSHOT_SCHEDULER_ENABLED: ${SNAPSHOT_SCHEDULER_ENABLED:-true}
      SNAPSHOT_SCHEDULER_TIME: ${SNAPSHOT_SCHEDULER_TIME:-23:59}
      
      # 身份驗證
      AUTH_USERNAME: ${AUTH_USERNAME}
      AUTH_PASSWORD: ${AUTH_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      
      # CORS 設定
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    ports:
      - "8080:8080"
    networks:
      - asset-manager-network
    # 資源限制 (可選,防止單一容器佔用過多資源)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Frontend 服務
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
    image: asset-manager-frontend:latest
    container_name: asset-manager-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
    ports:
      - "3000:3000"
    networks:
      - asset-manager-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: asset-manager-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # SSL 憑證 (之後加上 HTTPS 時使用)
      # - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - asset-manager-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3

# 定義 volumes 確保資料持久化
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# 定義網路
networks:
  asset-manager-network:
    driver: bridge

